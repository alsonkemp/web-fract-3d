// Generated by CoffeeScript 1.6.3
(function() {
  WebFract3D.ColorFunctions = {
    Mandelbrot: function(view_state, fractal_state) {
      return function(iter) {
        if (iter === fractal_state.max_iterations) {
          return [0, 0, 0];
        } else if (iter % 120 < 20) {
          return [0.2 + (iter % 120) / 25.0, 0, 0];
        } else if (((iter % 120) >= 20) && ((iter % 120) < 40)) {
          return [1, 0.2 + (iter % 120) / 25, 0, 0];
        } else if (((iter % 120) >= 40) && ((iter % 120) < 60)) {
          return [1.0 - ((iter % 120) - 40) / 20, 1, 0];
        } else if (((iter % 120) >= 60) && ((iter % 120) < 80)) {
          return [0, 1, 0.2 + ((iter % 120) - 60) / 25];
        } else if (((iter % 120) >= 80) && ((iter % 120) < 100)) {
          return [0, 1 - ((iter % 120) - 80) / 20, 1];
        } else {
          return [0, 0, 1 - ((iter % 120) - 100) / 20];
        }
      };
    },
    Newton2: function(view_state, fractal_state, fractal) {
      var blank, closeDistance, colors;
      blank = [0, 0, 0];
      colors = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.5, 0.5, 0.0], [0.0, 0.5, 0.5], [0.5, 0.0, 0.5]];
      closeDistance = 0.01;
      return function(iter, zr, zi) {
        var i, idx, p, r, _i, _len, _ref;
        _ref = fractal.poles;
        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {
          p = _ref[idx];
          r = p[0] - zr;
          i = p[1] - zi;
          if (Math.sqrt(r * r + i * i) < closeDistance) {
            return colors[idx];
          }
        }
        return blank;
      };
    }
  };

  WebFract3D.ColorFunctions.Mandelbrot3 = WebFract3D.ColorFunctions.Mandelbrot;

  WebFract3D.ColorFunctions.Newton3 = WebFract3D.ColorFunctions.Newton2;

  WebFract3D.ColorFunctions.Newton4 = WebFract3D.ColorFunctions.Newton2;

  WebFract3D.ColorFunctions.Newton5 = WebFract3D.ColorFunctions.Newton2;

  WebFract3D.ColorFunctions.Newton6 = WebFract3D.ColorFunctions.Newton2;

}).call(this);
