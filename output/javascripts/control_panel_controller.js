// Generated by CoffeeScript 1.6.3
(function() {
  WebFract3D.controller('ControlPanelCtrl', function($scope, $location, $window) {
    var changeFractal, k, v, _ref, _results,
      _this = this;
    this.renderer = new WebFract3D.Renderer();
    _.extend($scope, {
      expanded: true,
      original_view_state: {
        position: {
          x: 0,
          y: 0,
          z: -500
        },
        rotation: {
          x: -30,
          y: 0,
          z: 0
        },
        size: 800,
        redraw: true
      },
      original_fractal_state: {
        fractal: 'Mandelbrot',
        r: 0,
        i: 0,
        size: 4,
        divisions: 50,
        max_iterations: 100,
        jr: 0,
        ji: 0,
        recalc: true
      },
      handleKeypresses: false,
      doHandleKeyPresses: function() {
        console.log("doHandleKeyPresses");
        return $scope.handleKeyPresses = true;
      },
      doNotHandleKeyPresses: function() {
        console.log("doNotHandleKeyPresses");
        return $scope.handleKeyPresses = false;
      },
      handleKeyPress: function(evt) {
        var ch, fs, vs;
        if (!$scope.handleKeyPresses) {
          return;
        }
        ch = String.fromCharCode(evt.keyCode);
        fs = $scope.fractal_state;
        switch (ch) {
          case '[':
            fs.divisions /= 2;
            if (fs.divisions < 8) {
              fs.divisions = 8;
            }
            break;
          case ']':
            fs.divisions *= 2;
            break;
          case '1':
            changeFractal('Mandelbrot');
            break;
          case '2':
            changeFractal('Mandelbrot3');
            break;
          case '3':
            changeFractal('Newton2');
            break;
          case '4':
            changeFractal('Newton3');
            break;
          case '5':
            changeFractal('Newton4');
            break;
          case '6':
            changeFractal('Newton6');
        }
        switch (evt.keyCode) {
          case 33:
            fs.size /= 1.1;
            break;
          case 34:
            fs.size *= 1.1;
            break;
          case 40:
            fs.i -= fs.size * 0.1;
            break;
          case 38:
            fs.i += fs.size * 0.1;
            break;
          case 37:
            fs.r -= fs.size * 0.1;
            break;
          case 39:
            fs.r += fs.size * 0.1;
        }
        vs = $scope.view_state;
        switch (ch) {
          case '*':
            vs.position.z -= 1;
            break;
          case '/':
            vs.position.z += 1;
            break;
          case 'i':
            vs.rotation.x -= 2.0;
            break;
          case 'k':
            vs.rotation.x += 2.0;
            break;
          case 'j':
            vs.rotation.y += 2.0;
            break;
          case 'l':
            vs.rotation.y -= 2.0;
            break;
          case 'u':
            vs.rotation.z += 2.0;
            break;
          case 'o':
            vs.rotation.z -= 2.0;
        }
        return $scope.$digest();
      }
    });
    $scope.$watch('view_state', (function() {
      $scope.view_state.redraw = true;
      if (_this.renderer) {
        return _this.renderer.update($scope.view_state, $scope.fractal_state);
      }
    }), true);
    $scope.$watch('fractal_state', (function() {
      $scope.fractal_state.recalc = true;
      if (_this.renderer) {
        _this.renderer.update($scope.view_state, $scope.fractal_state);
      }
      return $location.search($scope.fractal_state);
    }), true);
    changeFractal = function(newFractal) {
      return $scope.fractal_state.fractal = newFractal;
    };
    $window.onkeydown = $scope.handleKeyPress;
    $window.onkeypress = $scope.handleKeyPress;
    $scope.view_state = $scope.original_view_state;
    $scope.fractal_state = $scope.original_fractal_state;
    _ref = $location.search();
    _results = [];
    for (k in _ref) {
      v = _ref[k];
      if (!isNaN(parseFloat(v)) && isFinite(v)) {
        _results.push($scope.fractal_state[k] = Number(v));
      } else {
        _results.push($scope.fractal_state[k] = v);
      }
    }
    return _results;
  });

}).call(this);
